// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace sqage {
namespace client {

namespace {

const ::google::protobuf::Descriptor* ClientInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClientInfo_2eproto() {
  protobuf_AddDesc_ClientInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClientInfo.proto");
  GOOGLE_CHECK(file != NULL);
  ClientInfo_descriptor_ = file->message_type(0);
  static const int ClientInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, phonetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, gputype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, networkmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, resourceversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, programversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, otherinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, androidid_),
  };
  ClientInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientInfo_descriptor_,
      ClientInfo::default_instance_,
      ClientInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClientInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientInfo_descriptor_, &ClientInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClientInfo_2eproto() {
  delete ClientInfo::default_instance_;
  delete ClientInfo_reflection_;
}

void protobuf_AddDesc_ClientInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ClientInfo.proto\022\020com.sqage.client\"\354\001\n"
    "\nClientInfo\022\020\n\010userType\030\001 \002(\t\022\020\n\010clientI"
    "d\030\002 \002(\t\022\017\n\007channel\030\003 \002(\t\022\021\n\tphoneType\030\004 "
    "\002(\t\022\017\n\007gpuType\030\005 \002(\t\022\023\n\013networkMode\030\006 \002("
    "\t\022\027\n\017resourceVersion\030\007 \002(\t\022\026\n\016programVer"
    "sion\030\010 \002(\t\022\021\n\totherInfo\030\t \003(\t\022\013\n\003mac\030\n \002"
    "(\t\022\014\n\004idfa\030\013 \001(\t\022\021\n\tandroidId\030\014 \001(\tB\002P\001", 279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClientInfo.proto", &protobuf_RegisterTypes);
  ClientInfo::default_instance_ = new ClientInfo();
  ClientInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientInfo_2eproto {
  StaticDescriptorInitializer_ClientInfo_2eproto() {
    protobuf_AddDesc_ClientInfo_2eproto();
  }
} static_descriptor_initializer_ClientInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientInfo::kUserTypeFieldNumber;
const int ClientInfo::kClientIdFieldNumber;
const int ClientInfo::kChannelFieldNumber;
const int ClientInfo::kPhoneTypeFieldNumber;
const int ClientInfo::kGpuTypeFieldNumber;
const int ClientInfo::kNetworkModeFieldNumber;
const int ClientInfo::kResourceVersionFieldNumber;
const int ClientInfo::kProgramVersionFieldNumber;
const int ClientInfo::kOtherInfoFieldNumber;
const int ClientInfo::kMacFieldNumber;
const int ClientInfo::kIdfaFieldNumber;
const int ClientInfo::kAndroidIdFieldNumber;
#endif  // !_MSC_VER

ClientInfo::ClientInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.sqage.client.ClientInfo)
}

void ClientInfo::InitAsDefaultInstance() {
}

ClientInfo::ClientInfo(const ClientInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.sqage.client.ClientInfo)
}

void ClientInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  usertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gputype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networkmode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourceversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  programversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  androidid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:com.sqage.client.ClientInfo)
  SharedDtor();
}

void ClientInfo::SharedDtor() {
  if (usertype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usertype_;
  }
  if (clientid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientid_;
  }
  if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_;
  }
  if (phonetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonetype_;
  }
  if (gputype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gputype_;
  }
  if (networkmode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete networkmode_;
  }
  if (resourceversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resourceversion_;
  }
  if (programversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete programversion_;
  }
  if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mac_;
  }
  if (idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete idfa_;
  }
  if (androidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete androidid_;
  }
  if (this != default_instance_) {
  }
}

void ClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientInfo_descriptor_;
}

const ClientInfo& ClientInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientInfo_2eproto();
  return *default_instance_;
}

ClientInfo* ClientInfo::default_instance_ = NULL;

ClientInfo* ClientInfo::New() const {
  return new ClientInfo;
}

void ClientInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_usertype()) {
      if (usertype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        usertype_->clear();
      }
    }
    if (has_clientid()) {
      if (clientid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        clientid_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_->clear();
      }
    }
    if (has_phonetype()) {
      if (phonetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonetype_->clear();
      }
    }
    if (has_gputype()) {
      if (gputype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gputype_->clear();
      }
    }
    if (has_networkmode()) {
      if (networkmode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        networkmode_->clear();
      }
    }
    if (has_resourceversion()) {
      if (resourceversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resourceversion_->clear();
      }
    }
    if (has_programversion()) {
      if (programversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        programversion_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3584) {
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mac_->clear();
      }
    }
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        idfa_->clear();
      }
    }
    if (has_androidid()) {
      if (androidid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        androidid_->clear();
      }
    }
  }
  otherinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.sqage.client.ClientInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userType = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usertype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usertype().data(), this->usertype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "usertype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_clientId;
        break;
      }

      // required string clientId = 2;
      case 2: {
        if (tag == 18) {
         parse_clientId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "clientid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel;
        break;
      }

      // required string channel = 3;
      case 3: {
        if (tag == 26) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), this->channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phoneType;
        break;
      }

      // required string phoneType = 4;
      case 4: {
        if (tag == 34) {
         parse_phoneType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonetype().data(), this->phonetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phonetype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gpuType;
        break;
      }

      // required string gpuType = 5;
      case 5: {
        if (tag == 42) {
         parse_gpuType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gputype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gputype().data(), this->gputype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gputype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_networkMode;
        break;
      }

      // required string networkMode = 6;
      case 6: {
        if (tag == 50) {
         parse_networkMode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_networkmode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->networkmode().data(), this->networkmode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "networkmode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_resourceVersion;
        break;
      }

      // required string resourceVersion = 7;
      case 7: {
        if (tag == 58) {
         parse_resourceVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourceversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resourceversion().data(), this->resourceversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resourceversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_programVersion;
        break;
      }

      // required string programVersion = 8;
      case 8: {
        if (tag == 66) {
         parse_programVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_programversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->programversion().data(), this->programversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "programversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_otherInfo;
        break;
      }

      // repeated string otherInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_otherInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_otherinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->otherinfo(this->otherinfo_size() - 1).data(),
            this->otherinfo(this->otherinfo_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "otherinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_otherInfo;
        if (input->ExpectTag(82)) goto parse_mac;
        break;
      }

      // required string mac = 10;
      case 10: {
        if (tag == 82) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_idfa;
        break;
      }

      // optional string idfa = 11;
      case 11: {
        if (tag == 90) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "idfa");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_androidId;
        break;
      }

      // optional string androidId = 12;
      case 12: {
        if (tag == 98) {
         parse_androidId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_androidid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->androidid().data(), this->androidid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "androidid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.sqage.client.ClientInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.sqage.client.ClientInfo)
  return false;
#undef DO_
}

void ClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.sqage.client.ClientInfo)
  // required string userType = 1;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usertype().data(), this->usertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usertype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->usertype(), output);
  }

  // required string clientId = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientid(), output);
  }

  // required string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channel(), output);
  }

  // required string phoneType = 4;
  if (has_phonetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonetype().data(), this->phonetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->phonetype(), output);
  }

  // required string gpuType = 5;
  if (has_gputype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gputype().data(), this->gputype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gputype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->gputype(), output);
  }

  // required string networkMode = 6;
  if (has_networkmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->networkmode().data(), this->networkmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "networkmode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->networkmode(), output);
  }

  // required string resourceVersion = 7;
  if (has_resourceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resourceversion().data(), this->resourceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resourceversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->resourceversion(), output);
  }

  // required string programVersion = 8;
  if (has_programversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->programversion().data(), this->programversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "programversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->programversion(), output);
  }

  // repeated string otherInfo = 9;
  for (int i = 0; i < this->otherinfo_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->otherinfo(i).data(), this->otherinfo(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "otherinfo");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->otherinfo(i), output);
  }

  // required string mac = 10;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->mac(), output);
  }

  // optional string idfa = 11;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idfa");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->idfa(), output);
  }

  // optional string androidId = 12;
  if (has_androidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidid().data(), this->androidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "androidid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->androidid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.sqage.client.ClientInfo)
}

::google::protobuf::uint8* ClientInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.sqage.client.ClientInfo)
  // required string userType = 1;
  if (has_usertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usertype().data(), this->usertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "usertype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->usertype(), target);
  }

  // required string clientId = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "clientid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientid(), target);
  }

  // required string channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), this->channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel(), target);
  }

  // required string phoneType = 4;
  if (has_phonetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonetype().data(), this->phonetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->phonetype(), target);
  }

  // required string gpuType = 5;
  if (has_gputype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gputype().data(), this->gputype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gputype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gputype(), target);
  }

  // required string networkMode = 6;
  if (has_networkmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->networkmode().data(), this->networkmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "networkmode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->networkmode(), target);
  }

  // required string resourceVersion = 7;
  if (has_resourceversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resourceversion().data(), this->resourceversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resourceversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->resourceversion(), target);
  }

  // required string programVersion = 8;
  if (has_programversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->programversion().data(), this->programversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "programversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->programversion(), target);
  }

  // repeated string otherInfo = 9;
  for (int i = 0; i < this->otherinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->otherinfo(i).data(), this->otherinfo(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "otherinfo");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->otherinfo(i), target);
  }

  // required string mac = 10;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mac(), target);
  }

  // optional string idfa = 11;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "idfa");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->idfa(), target);
  }

  // optional string androidId = 12;
  if (has_androidid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->androidid().data(), this->androidid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "androidid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->androidid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.sqage.client.ClientInfo)
  return target;
}

int ClientInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userType = 1;
    if (has_usertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usertype());
    }

    // required string clientId = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }

    // required string channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // required string phoneType = 4;
    if (has_phonetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonetype());
    }

    // required string gpuType = 5;
    if (has_gputype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gputype());
    }

    // required string networkMode = 6;
    if (has_networkmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->networkmode());
    }

    // required string resourceVersion = 7;
    if (has_resourceversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourceversion());
    }

    // required string programVersion = 8;
    if (has_programversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->programversion());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required string mac = 10;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }

    // optional string idfa = 11;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string androidId = 12;
    if (has_androidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->androidid());
    }

  }
  // repeated string otherInfo = 9;
  total_size += 1 * this->otherinfo_size();
  for (int i = 0; i < this->otherinfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->otherinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientInfo::MergeFrom(const ClientInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherinfo_.MergeFrom(from.otherinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_phonetype()) {
      set_phonetype(from.phonetype());
    }
    if (from.has_gputype()) {
      set_gputype(from.gputype());
    }
    if (from.has_networkmode()) {
      set_networkmode(from.networkmode());
    }
    if (from.has_resourceversion()) {
      set_resourceversion(from.resourceversion());
    }
    if (from.has_programversion()) {
      set_programversion(from.programversion());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_androidid()) {
      set_androidid(from.androidid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000002ff) != 0x000002ff) return false;

  return true;
}

void ClientInfo::Swap(ClientInfo* other) {
  if (other != this) {
    std::swap(usertype_, other->usertype_);
    std::swap(clientid_, other->clientid_);
    std::swap(channel_, other->channel_);
    std::swap(phonetype_, other->phonetype_);
    std::swap(gputype_, other->gputype_);
    std::swap(networkmode_, other->networkmode_);
    std::swap(resourceversion_, other->resourceversion_);
    std::swap(programversion_, other->programversion_);
    otherinfo_.Swap(&other->otherinfo_);
    std::swap(mac_, other->mac_);
    std::swap(idfa_, other->idfa_);
    std::swap(androidid_, other->androidid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientInfo_descriptor_;
  metadata.reflection = ClientInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace sqage
}  // namespace com

// @@protoc_insertion_point(global_scope)
